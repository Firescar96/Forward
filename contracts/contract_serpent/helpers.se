extern storage.se: [gain_access:i:_,has_access:i:i, revoke_access:i:_, send:ii:_, update_creator:i:_]

data access_control[]
data sa  # storage_address
data creator
def init():
    self.creator = msg.sender

def update_creator(creator_address):
	if msg.sender == self.creator:
		self.creator = creator_address

def gain_access(contract_address):
    if msg.sender == self.creator and not self.access_control[contract_address]:
        self.access_control[contract_address] = 1

def revoke_access(contract_address):
    if msg.sender == self.creator and self.access_control[contract_address]:
        self.access_control[contract_address] = 0

def has_access(contract_address):
    return self.access_control[contract_address]

def set_storage_address(storage_address):
    if msg.sender == self.creator:
        self.sa = storage_address

def get_storage_address():
    return self.sa

def send_ether_from_storage(receiver_address, amount):
    # either other functions of this contract or contracts with access rights
    if msg.sender == self or self.access_control[msg.sender]:
            self.sa.send(receiver_address, amount)
